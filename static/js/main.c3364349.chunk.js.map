{"version":3,"sources":["Components/Header.js","Components/Controls.js","redux/actions.js","redux/todos-selectors.js","Components/CalendarWrap.js","Components/Modal.js","App.js","redux/store.js","index.js"],"names":["header","className","controls","currentMonth","prevMonthHandler","currentMonthHandler","nextMonthHandler","type","onClick","addTodo","createAction","removeTodo","changeTodo","setCurrentTodo","getTodos","state","todos","items","getCurrentTodo","current","RowWrapper","styled","div","CalendarWrap","firstDay","selectedMonth","handleOpenModal","handleModalPosition","useSelector","dispatch","useDispatch","day","clone","subtract","daysArray","Array","map","add","classesIntializer","moment","isSame","isCurrentDay","month","_","i","format","shortid","generate","dayItem","e","sort","a","b","Date","date","time","todo","id","console","log","handleTodoModal","notes","unix","Modal","cursorPos","handleModalClose","chosenDate","currentTodo","useState","setDate","setTime","setNotes","handleChange","target","value","name","length","alert","style","action","onSubmit","preventDefault","htmlFor","onChange","App","updateLocale","week","dow","today","setToday","isShown","setIsShown","setCursorPos","setChosenDate","startOf","currentMonthInFormat","left","pageX","top","pageY","Header","Controls","persistConfig","key","storage","todosReducer","createReducer","payload","filter","rootReducer","combineReducers","persistedReducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c3364349.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst header = () => {\r\n  return (\r\n    <div className=\"header section\">\r\n      <p className=\"title\">Calendar View</p>\r\n      <div className=\"buttons-form header-buttons\">\r\n        <button>Month</button>\r\n        <button>Week</button>\r\n        <button>Day</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default header;\r\n","import React from \"react\";\r\n\r\nconst controls = ({\r\n  currentMonth,\r\n  prevMonthHandler,\r\n  currentMonthHandler,\r\n  nextMonthHandler,\r\n}) => {\r\n  return (\r\n    <div className=\"controls section\">\r\n      <div className=\"buttons-form\">\r\n        <button type=\"button\" onClick={currentMonthHandler}>\r\n          Today\r\n        </button>\r\n        <button type=\"button\" onClick={prevMonthHandler}>\r\n          Back\r\n        </button>\r\n        <button type=\"button\" onClick={nextMonthHandler}>\r\n          Next\r\n        </button>\r\n      </div>\r\n      <p className=\"title\">{currentMonth}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default controls;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addTodo = createAction('todo/Add');\r\n\r\nexport const removeTodo = createAction('todo/Remove');\r\n\r\nexport const changeTodo = createAction('todo/Change');\r\n\r\nexport const setCurrentTodo = createAction('todo/Current');\r\n","export const getTodos = state => state.todos.items;\r\nexport const getCurrentTodo = state => state.todos.current;\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport styled from 'styled-components';\r\nimport { setCurrentTodo } from '../redux/actions';\r\nimport { getTodos } from '../redux/todos-selectors';\r\n\r\nconst RowWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  flex-direction: column;\r\n\r\n  & div {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    width: 100%;\r\n    height: 30px;\r\n    margin-bottom: 3px;\r\n\r\n    border-radius: 7px;\r\n    background-color: #3b86ff;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst CalendarWrap = ({\r\n  firstDay,\r\n  selectedMonth,\r\n  handleOpenModal,\r\n  handleModalPosition,\r\n}) => {\r\n  const todos = useSelector(getTodos);\r\n  const dispatch = useDispatch();\r\n  const totalDays = 42;\r\n\r\n  const day = firstDay.clone().subtract(1, 'day');\r\n  const daysArray = [...Array(totalDays)].map(() =>\r\n    day.add(1, 'day').clone()\r\n  );\r\n  const isCurrentDay = day => moment().isSame(day, 'day');\r\n  const isSelectedMonth = month =>\r\n    selectedMonth.isSame(month, 'month');\r\n\r\n  const classesIntializer = moment => {\r\n    if (isCurrentDay(moment)) {\r\n      return 'date current-day';\r\n    } else if (!isSelectedMonth(moment)) {\r\n      return 'date opacity';\r\n    } else {\r\n      return 'date';\r\n    }\r\n  };\r\n\r\n  const handleTodoModal = (e, todo) => {\r\n    dispatch(setCurrentTodo(todo));\r\n    handleModalPosition(e, todo);\r\n    console.log(todo);\r\n  };\r\n\r\n  return (\r\n    <div className='calendar-wrap'>\r\n      {[...Array(7)].map((_, i) => (\r\n        <div\r\n          className='calendar-cell header-cell'\r\n          key={shortid.generate()}\r\n        >\r\n          {moment()\r\n            .day(i + 1)\r\n            .format('ddd')}\r\n        </div>\r\n      ))}\r\n      {daysArray.map(dayItem => (\r\n        <div\r\n          className='calendar-cell'\r\n          key={dayItem.unix()}\r\n          onClick={e => handleOpenModal(e, dayItem)}\r\n        >\r\n          <RowWrapper>\r\n            <p className={classesIntializer(dayItem)}>\r\n              {dayItem.format('D')}\r\n            </p>\r\n            {[...todos]\r\n              .sort(\r\n                (a, b) =>\r\n                  new Date(`${a.date}, ${a.time}`) -\r\n                  new Date(`${b.date}, ${b.time}`)\r\n              )\r\n              .map(\r\n                todo =>\r\n                  todo.date ===\r\n                    dayItem.format('YYYY-MM-DD') && (\r\n                    <div\r\n                      id='todo'\r\n                      key={shortid.generate()}\r\n                      onClick={e =>\r\n                        handleTodoModal(e, todo)\r\n                      }\r\n                    >\r\n                      {todo.notes}\r\n                    </div>\r\n                  )\r\n              )}\r\n          </RowWrapper>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarWrap;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  addTodo,\r\n  changeTodo,\r\n  removeTodo,\r\n} from '../redux/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCurrentTodo } from '../redux/todos-selectors';\r\nimport shortid from 'shortid';\r\nimport moment from 'moment';\r\n\r\nconst Modal = ({\r\n  cursorPos,\r\n  handleModalClose,\r\n  chosenDate,\r\n}) => {\r\n  const currentTodo = useSelector(getCurrentTodo);\r\n  const [date, setDate] = useState(chosenDate);\r\n  const [time, setTime] = useState(\r\n    currentTodo ? currentTodo.time : ''\r\n  );\r\n  const [notes, setNotes] = useState(\r\n    currentTodo?.notes || ''\r\n  );\r\n  const id = currentTodo?.id;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { value, name } = e.target;\r\n\r\n    setDate(chosenDate);\r\n\r\n    if (name === 'event-date') {\r\n      setDate(value);\r\n      console.log(value);\r\n    }\r\n    if (name === 'event-time') {\r\n      setTime(value);\r\n\r\n      console.log(time);\r\n    }\r\n    if (name === 'event-notes') {\r\n      value.length <= 30\r\n        ? setNotes(value)\r\n        : alert('Too many symbols');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    handleModalClose();\r\n    console.log(time);\r\n\r\n    if (!currentTodo) {\r\n      const notPastDates = new Date();\r\n\r\n      if (time.length !== 0 && notes.length !== 0) {\r\n        dispatch(\r\n          addTodo({\r\n            date,\r\n            time,\r\n            notes,\r\n            id: shortid.generate(),\r\n          })\r\n        );\r\n\r\n        setDate('');\r\n        setTime('');\r\n        setNotes('');\r\n      } else {\r\n        alert('All fields required');\r\n      }\r\n    } else {\r\n      if (time.length !== 0 && notes.length !== 0) {\r\n        dispatch(\r\n          changeTodo({\r\n            date,\r\n            time,\r\n            notes,\r\n            id,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTodoRemove = () => {\r\n    dispatch(removeTodo(currentTodo));\r\n  };\r\n\r\n  return (\r\n    <div id='modal' style={cursorPos}>\r\n      <ul>\r\n        <li>\r\n          <form action='submit' onSubmit={handleSubmit}>\r\n            <label htmlFor='event-date'>event date</label>\r\n            <input\r\n              type='date'\r\n              name='event-date'\r\n              value={chosenDate}\r\n              onChange={handleChange}\r\n            />\r\n            <label htmlFor='event-time'>event time</label>\r\n            <input\r\n              type='time'\r\n              name='event-time'\r\n              value={time}\r\n              onChange={handleChange}\r\n            />\r\n            <label htmlFor='event-notes'>event notes</label>\r\n            <input\r\n              type='text'\r\n              name='event-notes'\r\n              onChange={handleChange}\r\n              value={notes}\r\n            />\r\n            <div className='modal-buttons'>\r\n              {currentTodo ? (\r\n                <button\r\n                  type='button'\r\n                  onClick={handleTodoRemove}\r\n                >\r\n                  Remove\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  type='button'\r\n                  onClick={handleModalClose}\r\n                >\r\n                  Cancel\r\n                </button>\r\n              )}\r\n              {currentTodo ? (\r\n                <button type='submit'>Change</button>\r\n              ) : (\r\n                <button type='submit'>Save</button>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import moment from 'moment';\nimport Header from './Components/Header';\nimport Controls from './Components/Controls';\nimport CalendarWrap from './Components/CalendarWrap';\nimport React, { useState } from 'react';\nimport Modal from './Components/Modal';\nimport { setCurrentTodo } from './redux/actions';\nimport { useDispatch } from 'react-redux';\n\nfunction App() {\n  moment.updateLocale('en', {\n    week: { dow: 1 },\n  });\n\n  const [today, setToday] = useState(moment());\n  const [isShown, setIsShown] = useState(false);\n  const [cursorPos, setCursorPos] = useState({});\n  const [chosenDate, setChosenDate] = useState('');\n  const dispatch = useDispatch();\n\n  const firstDay = today\n    .clone()\n    .startOf('month')\n    .startOf('week');\n\n  const currentMonthInFormat = today\n    .clone()\n    .format('MMMM YYYY');\n\n  const nextMonthHandler = () =>\n    setToday(today.clone().add(1, 'month'));\n  const currentMonthHandler = () => setToday(moment());\n  const prevMonthHandler = () =>\n    setToday(today.clone().subtract(1, 'month'));\n\n  const handleModalPosition = (e, todo) => {\n    e.preventDefault();\n    setCursorPos({\n      left: `${e.pageX - 100.5}px`,\n      top: `${e.pageY + 40}px`,\n    });\n    // if (e.currentTarget.id !== 'todo') {\n    //   dispatch(setCurrentTodo(1));\n    // } else {\n    //   dispatch(setCurrentTodo(todo));\n    // }\n\n    setIsShown(true);\n    console.log(cursorPos);\n  };\n\n  const handleOpenModal = (e, day) => {\n    setChosenDate(day.format('YYYY-MM-DD'));\n    if (e.target.id !== 'todo') {\n      handleModalPosition(e);\n\n      dispatch(setCurrentTodo(null));\n    }\n  };\n\n  const handleModalClose = () => {\n    setIsShown(false);\n  };\n\n  return (\n    <div className='container'>\n      <Header />\n      <Controls\n        currentMonth={currentMonthInFormat}\n        nextMonthHandler={nextMonthHandler}\n        currentMonthHandler={currentMonthHandler}\n        prevMonthHandler={prevMonthHandler}\n      />\n      <CalendarWrap\n        firstDay={firstDay}\n        selectedMonth={today}\n        handleOpenModal={handleOpenModal}\n        handleModalPosition={handleModalPosition}\n      />\n      {isShown && (\n        <Modal\n          cursorPos={cursorPos}\n          handleModalClose={handleModalClose}\n          chosenDate={chosenDate}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  createReducer,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit';\r\nimport moment from 'moment';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {\r\n  addTodo,\r\n  removeTodo,\r\n  setCurrentTodo,\r\n  changeTodo,\r\n} from './actions';\r\n\r\nconst persistConfig = {\r\n  key: 'Todos',\r\n  storage,\r\n};\r\n\r\nconst todosReducer = createReducer(\r\n  {\r\n    items: [],\r\n    current: {},\r\n  },\r\n  {\r\n    [addTodo]: (state, { payload }) => {\r\n      if (\r\n        new Date() <\r\n        new Date(`${payload.date}, ${payload.time}`)\r\n      ) {\r\n        return {\r\n          items: [...state.items, payload],\r\n        };\r\n      } else {\r\n        alert(\r\n          'it is impossible to record an event on the previous date'\r\n        );\r\n      }\r\n    },\r\n    [removeTodo]: (state, { payload }) => ({\r\n      items: [\r\n        ...state.items.filter(i => i.id !== payload.id),\r\n      ],\r\n    }),\r\n    [changeTodo]: (state, { payload }) => ({\r\n      items: [\r\n        ...state.items.filter(i => i.id !== payload.id),\r\n        payload,\r\n      ],\r\n    }),\r\n    [setCurrentTodo]: (state, { payload }) => ({\r\n      ...state,\r\n      current: payload,\r\n    }),\r\n  }\r\n);\r\n\r\nconst rootReducer = combineReducers({\r\n  todos: todosReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(\r\n  persistConfig,\r\n  rootReducer\r\n);\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [\r\n        FLUSH,\r\n        REHYDRATE,\r\n        PAUSE,\r\n        PERSIST,\r\n        PURGE,\r\n        REGISTER,\r\n      ],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\nimport App from './App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}